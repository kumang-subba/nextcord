// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  servers Server[]
  members Member[]
  Channel Channel[]

  friends   Friends[] @relation("user")
  friendsOf Friends[] @relation("friendsOf")

  directMessages DirectMessage[]

  chatSent     Chat[] @relation("UserOne")
  chatReceived Chat[] @relation("UserTwo")
}

model Friends {
  id String @id @default(uuid())

  userId String
  user   User   @relation("user", fields: [userId], references: [id], onDelete: Cascade)

  friendId String
  friend   User   @relation("friendsOf", fields: [friendId], references: [id], onDelete: Cascade)

  requestSeen     Boolean @default(false)
  requestAccepted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channels Channel[]

  @@index([ownerId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)
  edited  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Chat {
  id String @id @default(uuid())

  userOneId String
  userOne   User   @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId String
  userTwo   User   @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  directMessage DirectMessage[]

  @@unique([userOneId, userTwoId])
  @@index([userTwoId])
}

model DirectMessage {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)
  edited  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([chatId])
}
